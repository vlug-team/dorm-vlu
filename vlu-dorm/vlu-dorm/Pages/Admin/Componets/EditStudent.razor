@inject StudentServices StudentServices
@inject RoomServices RoomServices
<Form Model="Student"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      LabelColSpan="8"
      WrapperColSpan="16">
    @if (isSucess)
    {
        <Row Justify="center" Style="margin-top:1em">
            <FormItem>
                <Alert Message="@notice" Type="@type" CloseText="x" Closable Style="width:500px" />
            </FormItem>
        </Row>
    }
    else
    {
        <FormItem></FormItem>
    }
    <FormItem>
        <Row>
            <Col Span="7">
            <Input Disabled="true" @bind-Value="context.FullName" Placeholder="Họ và tên"></Input>
            </Col>
            <br />
            <Col Offset="2">
            <RadioGroup Disabled="true" @bind-Value="context.Gender">
                <Radio Value="@("Nam")">Nam</Radio>
                <Radio Value="@("Nữ")">Nữ</Radio>
            </RadioGroup>
            </Col>
        </Row>
    </FormItem>
    <FormItem>
        <Row>
            <Col Span="7">
            <Input Disabled="true" @bind-Value="context.StudentCode" Placeholder="Mã số sinh viên"></Input>
            </Col>
            <Col Span="4" Offset="2">
            <Select Disabled="true" @bind-Value="@context.Course" TItem="string" TItemValue="string" Placeholder="Khóa học">
                <SelectOptions>
                        @foreach (var item in _course)
                        {
                        <SelectOption TItemValue="string" TItem="string" Value=@item Label=@item />
                        }
                </SelectOptions>
            </Select>
            </Col>
        </Row>
    </FormItem>
    <FormItem>
        <Row>
            <Col Span="7">
            <Input Disabled="true" @bind-Value="context.Email" Placeholder="Email trường cấp" Type="email"></Input>
            </Col>
            <Col Offset="2">
            <AutoComplete Disabled="true" @bind-Value="context.Department" Options="@_department.Distinct()" Pl aceholder="Khoa" />
            </Col>
        </Row>
    </FormItem>
    <FormItem>
        <Row>
            <Col Span="7">
            <Input Disabled="true" @bind-Value="context.PhoneNumeber" Placeholder="Số điện thoại"></Input>
            </Col>
            <Col Offset="2">
            <DatePicker Disabled="true" @bind-Value="context.BirthDay" Format="dd/MM/yyyy" />
            </Col>
        </Row>
    </FormItem>
    <FormItem>
        <Row>
            <Col Span="15">
            <Input Disabled="true" @bind-Value="context.PermanentAddress" Placeholder="Địa chỉ: 69 Đặng thùy trâm,..."></Input>
            </Col>
        </Row>
    </FormItem>
    <FormItem>
        <Row Justify="center">
            <Col>
            <Text>Chọn Phòng:</Text>
            </Col>
            <Col Offset="2">
            <Select DataSource="@Rooms"
                    @bind-Value="value"
                    LabelName="@nameof(Room.RoomNumber)"
                    ValueName="@nameof(Room.RoomNumber)"
                    SortByLabel="@SortDirection.Ascending"
                    Placeholder="Chọn Phòng:"
                    EnableSearch
                    OnSelectedItemChanged="(Room room)=>OnSelectedItemChangedHandler(room)"
                    AllowClear>
            </Select>
            </Col>
        </Row>
    </FormItem>
    <FormItem WrapperColOffset="13" WrapperColSpan="6">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Sửa
        </Button>
    </FormItem>

</Form>
@code {
    [Parameter] public int Id { get; set; }

    private Students Student { get; set; }
    private List<Room> Rooms;

    private List<string> _course = new() { "K23", "K24", "K25", "K26", "K27", "K28" };
    private List<string> _department = new() { "Công nghệ thông tin", "Khoa học dữ liệu", "Công nghệ kỹ thuật ô tô", "Thiết kế đồ họa", "Thanh nhạc", "Piano", "Thiết kế công nghiệp", "Thiết kế thời trang", "Diễn viên kịch, điện ảnh - truyền hình", "Đạo diễn điện ảnh, truyền hình", "Ngôn ngữ Anh", "Ngôn ngữ Trung Quốc", "Văn học", "Tâm lý học", "Đông phương học", "Quan hệ công chúng", "Quản trị kinh doanh", "Marketing", "Bất động sản", "Kinh doanh thương mại", "Tài chính - Ngân hàng", "Kế toán", "Luật kinh tế", "Luật", "Công nghệ sinh học", "Công nghệ sinh học y dược", "Quản trị công nghệ sinh học", "Kỹ thuật phần mềm", "Công nghệ kỹ thuật điện, điện tử", "Công nghệ kỹ thuật môi trường", "Logistics và quản lý chuỗi cung ứng", "Quản trị môi trường doanh nghiệp", "Kỹ thuật cơ điện tử", "Kỹ thuật nhiệt", "Công nghệ thực phẩm", "Kiến trúc", "Thiết kế nội thất", "Kỹ thuật xây dựng", "Kỹ thuật xây dựng công trình giao thông", "Quản lý xây dựng", "Thiết kế xanh", "Nông nghiệp công nghệ cao", "Dược học", "Điều dưỡng", "Răng - Hàm - Mặt", "Kỹ thuật xét nghiệm y học", "Công tác xã hội", "Quản trị dịch vụ du lịch và lữ hành", "Quản trị khách sạn", "Quản trị nhà hàng và dịch vụ ăn uống" };

    private bool isSucess = false;
    private string notice;
    private string type;
    private string value;
    protected override void OnInitialized()
    {
        Student = StudentServices.GetStudentById(Id);
        Rooms = RoomServices.GetAll();
    }
    private async Task OnFinish(EditContext editContext)
    {
        if (isSucess == false)
        {
            isSucess = true;
            notice = "Sửa thành công";
            type = "success";
            await StudentServices.UpdateAsync(Student);
        }
        else
        {
            notice = "Sửa thành công";
            type = "success";
            await StudentServices.UpdateAsync(Student);
        }
    }
    private void OnFinishFailed(EditContext editContext)
    {
        isSucess = true;
        notice = "Đăng kí không thành công";
        type = "error";

    }
    private void OnSelectedItemChangedHandler(Room value)
    {
        Student.RoomId = value.Id;
        Student.RoomNavgation = value;
    }
}
